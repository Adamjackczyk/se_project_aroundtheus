!function(){"use strict";class e{constructor(e,t,s,r,i){this.name=e.name,this.link=e.link,this.id=e._id,this.cardSelector=t,this.handleImageClick=s,this.handleDeleteClick=r,this.handleLikeClick=i,this.isLiked=e.isLiked||!1}getTemplate(){return document.querySelector(this.cardSelector).content.querySelector(".card").cloneNode(!0)}setEventListeners(){this.cardImageElement.addEventListener("click",(()=>{this.handleImageClick(this.name,this.link)})),this.cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this.handleLikeClick(this)})),this.cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this.handleDeleteClick(this)}))}toggleLikeButton(){this.isLiked=!this.isLiked,this.cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}deleteCard(){this.cardElement.remove(),this.cardElement=null}generateCard(){return this.cardElement=this.getTemplate(),this.cardImageElement=this.cardElement.querySelector(".card__image"),this.cardElement.querySelector(".card__title").textContent=this.name,this.cardImageElement.src=this.link,this.cardImageElement.alt=this.name,this.isLiked&&this.cardElement.querySelector(".card__like-button").classList.add("card__like-button_active"),this.setEventListeners(),this.cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._inactiveButtonClass=this._settings.inactiveButtonClass}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners(),this.toggleButtonState()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}}class s{constructor(e){this._popup=document.querySelector(e),this.handleEscClose=this.handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this.handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this.handleEscClose)}handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(e),this.handleFormSubmit=t,this.form=this._popup.querySelector(".modal__form"),this.formValidator=s,this.submitButton=this.form.querySelector(".modal__button"),this.submitButtonText=this.submitButton.textContent}getInputValues(){const e={};return this.form.querySelectorAll(".modal__input").forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this.form.querySelectorAll(".modal__input").forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this.form.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this.handleFormSubmit(this.getInputValues()).then((()=>{this.form.reset(),this.formValidator&&this.formValidator.toggleButtonState(),this.close()})).catch((e=>{console.error("Form submission error:",e)})).finally((()=>{this.renderLoading(!1)}))})),super.setEventListeners()}renderLoading(e){this.submitButton.textContent=e?"Saving...":this.submitButtonText}open(){super.open(),this.formValidator&&this.formValidator.resetValidation()}setSubmitAction(e){this.handleFormSubmit=e}}const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},n=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{method:"GET",headers:this.headers})}getUserInfo(){return this._request(`${this.baseUrl}/users/me`,{method:"GET",headers:this.headers})}setUserInfo(e){return this._request(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify(e)})}addNewCard(e){return this._request(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify(e)})}deleteCard(e){return this._request(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers})}likeCard(e){return this._request(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers})}unlikeCard(e){return this._request(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers})}updateUserAvatar(e){return this._request(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})})}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6b68a929-d08e-4cf9-a697-37317d009dd7","Content-Type":"application/json"}});function a(e,t){v.open({name:e,link:t})}function o(t){return new e(t,"#card-template",a,l,d).generateCard()}function l(e){E.open(),E.setSubmitAction((()=>n.deleteCard(e.id).then((()=>{e.deleteCard(),E.close()})).catch((e=>{console.error("Failed to delete card:",e)}))))}function d(e){(e.isLiked?n.unlikeCard(e.id):n.likeCard(e.id)).then((t=>{console.log("Updated card data:",t),e.toggleLikeButton()})).catch((e=>{console.error("Failed to update like status:",e)}))}const c=new class{constructor(e,t){let{items:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:e=>{const t=o(e);c.addItem(t)}},".cards__list"),h={};document.querySelectorAll(i.formSelector).forEach((e=>{const s=new t(i,e);s.enableValidation(),h[e.getAttribute("id")]=s}));const u=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:s,avatar:r,id:i}=e;this._nameElement.textContent=t,this._jobElement.textContent=s,this._avatarElement.src=r,this._id=i}getUserId(){return this._id}}({nameSelector:"#profile-title",jobSelector:"#profile-desc",avatarSelector:".profile__pic"}),m=new r("#profile-edit-modal",(e=>n.setUserInfo({name:e.title,about:e.description}).then((e=>{u.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})}))),h["edit-profile-form"]),_=new r("#add-card-modal",(e=>n.addNewCard({name:e.title,link:e.link}).then((e=>{const t=o(e);c.addItem(t)}))),h["add-card-form"]),p=new r("#update-avatar-modal",(e=>n.updateUserAvatar(e.avatar).then((e=>{u.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})}))),h["update-avatar-form"]),E=new r("#delete-card-modal",(()=>{}),null);m.setEventListeners(),_.setEventListeners(),p.setEventListeners(),E.setEventListeners();const v=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__image-label")}open(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._caption.textContent=t,super.open()}}("#modal-image-display");v.setEventListeners(),document.getElementById("profile-edit-button").addEventListener("click",(()=>{const e=u.getUserInfo();document.getElementById("profile-title-input").value=e.name,document.getElementById("profile-description-input").value=e.job,m.open()})),document.querySelector(".profile__add-button").addEventListener("click",(()=>{_.open()})),document.querySelector(".profile__pic-container").addEventListener("click",(()=>{p.open()})),n.getAppInfo().then((e=>{let[t,s]=e;u.setUserInfo({name:t.name,job:t.about,avatar:t.avatar}),c.renderItems(s.reverse())})).catch((e=>{console.error("Failed to fetch app info:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,