!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this._isLiked=e.isLiked||!1}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)}))}toggleLikeButton(){this._isLiked=!this._isLiked,this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_deleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._getTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._isLiked&&this._cardElement.querySelector(".card__like-button").classList.add("card__like-button_active"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._inactiveButtonClass=this._settings.inactiveButtonClass}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners(),this.toggleButtonState()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._formValidator=s,this._submitButton=this._form.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){return this._formValues={},this._form.querySelectorAll(".modal__input").forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._renderLoading(!0),this._handleFormSubmit(this._getInputValues()).then((()=>{this._renderLoading(!1),this._form.reset(),this._formValidator&&this._formValidator.toggleButtonState(),this.close()})).catch((()=>{this._renderLoading(!1)}))}))}_renderLoading(e){this._submitButton.textContent=e?"Saving...":this._submitButtonText}open(){super.open(),this._formValidator&&this._formValidator.resetValidation(),this._renderLoading(!1)}close(){super.close(),this._form.reset(),this._formValidator&&this._formValidator.toggleButtonState(),this._renderLoading(!1)}setSubmitAction(e){this._handleFormSubmit=e}}const i=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},a=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}setUserInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)})}addNewCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}unlikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}updateUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6b68a929-d08e-4cf9-a697-37317d009dd7","Content-Type":"application/json"}});function o(e,t){f.open({name:e,link:t})}function l(t){return new e(t,"#card-template",o,d,c).generateCard()}function d(e){E.open(),E.setSubmitAction((()=>a.deleteCard(e._id).then((()=>{e._deleteCard(),E.close()})).catch((e=>{console.error("Failed to delete card:",e)}))))}function c(e){(e._isLiked?a.unlikeCard(e._id):a.likeCard(e._id)).then((()=>{e.toggleLikeButton()})).catch((e=>{console.error("Failed to update like status:",e)}))}const h=new class{constructor(e,t){let{items:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:e=>{const t=l(e);h.addItem(t)}},".cards__list"),_={};document.querySelectorAll(n.formSelector).forEach((e=>{const s=new t(n,e);s.enableValidation(),_[e.getAttribute("id")]=s}));const u=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:s,avatar:r,id:i}=e;this._nameElement.textContent=t,this._jobElement.textContent=s,this._avatarElement.src=r,this._id=i}getUserId(){return this._id}}({nameSelector:"#profile-title",jobSelector:"#profile-desc",avatarSelector:".profile__pic"}),m=new r("#profile-edit-modal",(e=>a.setUserInfo({name:e.title,about:e.description}).then((e=>{u.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})}))),_["edit-profile-form"]),p=new r("#add-card-modal",(e=>a.addNewCard({name:e.title,link:e.link}).then((e=>{const t=l(e);h.addItem(t)}))),_["add-card-form"]),g=new r("#update-avatar-modal",(e=>a.updateUserAvatar(e.avatar).then((e=>{u.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})}))),_["update-avatar-form"]),E=new r("#delete-card-modal",(()=>{}),null);m.setEventListeners(),p.setEventListeners(),g.setEventListeners(),E.setEventListeners();const f=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__image-label")}open(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._caption.textContent=t,super.open()}}("#modal-image-display");f.setEventListeners(),document.getElementById("profile-edit-button").addEventListener("click",(()=>{const e=u.getUserInfo();document.getElementById("profile-title-input").value=e.name,document.getElementById("profile-description-input").value=e.job,m.open()})),document.querySelector(".profile__add-button").addEventListener("click",(()=>{p.open()})),document.querySelector(".profile__pic-container").addEventListener("click",(()=>{g.open()})),a.getAppInfo().then((e=>{let[t,s]=e;u.setUserInfo({name:t.name,job:t.about,avatar:t.avatar}),h.renderItems(s.reverse()),0===s.length&&i.forEach((e=>{a.addNewCard(e).then((e=>{const t=l(e);h.addItem(t)})).catch((e=>{console.error("Failed to upload card:",e)}))}))})).catch((e=>{console.error("Failed to fetch app info:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,