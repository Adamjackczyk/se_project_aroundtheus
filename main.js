!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=n,this._isLiked=e.isLiked||!1}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)}))}toggleLikeButton(){this._isLiked=!this._isLiked,this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_deleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._getTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._isLiked&&this._cardElement.querySelector(".card__like-button").classList.add("card__like-button_active"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._inactiveButtonClass=this._settings.inactiveButtonClass}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners(),this.toggleButtonState()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}}class s{constructor(e){this._popup=document.querySelector(e),this.handleEscClose=this.handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this.handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this.handleEscClose)}handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(e),this.handleFormSubmit=t,this.form=this._popup.querySelector(".modal__form"),this.formValidator=s,this.submitButton=this.form.querySelector(".modal__button"),this.submitButtonText=this.submitButton.textContent}getInputValues(){return this.formValues={},this.form.querySelectorAll(".modal__input").forEach((e=>{this.formValues[e.name]=e.value})),this.formValues}setEventListeners(){super.setEventListeners(),this.form.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this.handleFormSubmit(this.getInputValues()).then((()=>{this.form.reset(),this.formValidator&&this.formValidator.toggleButtonState(),this.close()})).catch((e=>{console.error(e)})).finally((()=>{this.renderLoading(!1)}))}))}renderLoading(e){this.submitButton.textContent=e?"Saving...":this.submitButtonText}open(){super.open(),this.formValidator&&this.formValidator.resetValidation()}close(){super.close()}setSubmitAction(e){this.handleFormSubmit=e}}const n=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},a=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}request(e,t){return fetch(e,t).then(this.checkResponse)}getInitialCards(){return this.request(`${this.baseUrl}/cards`,{method:"GET",headers:this.headers})}getUserInfo(){return this.request(`${this.baseUrl}/users/me`,{method:"GET",headers:this.headers})}setUserInfo(e){return this.request(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify(e)})}addNewCard(e){return this.request(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify(e)})}deleteCard(e){return this.request(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers})}likeCard(e){return this.request(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers})}unlikeCard(e){return this.request(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers})}updateUserAvatar(e){return this.request(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})})}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6b68a929-d08e-4cf9-a697-37317d009dd7","Content-Type":"application/json"}});function o(e,t){f.open({name:e,link:t})}function l(t){return new e(t,"#card-template",o,d,c).generateCard()}function d(e){g.open(),g.setSubmitAction((()=>a.deleteCard(e._id).then((()=>{e._deleteCard(),g.close()})).catch((e=>{console.error("Failed to delete card:",e)}))))}function c(e){(e.isLiked?a.unlikeCard(e._id):a.likeCard(e._id)).then((()=>{e.toggleLikeButton()})).catch((e=>{console.error("Failed to update like status:",e)}))}const h=new class{constructor(e,t){let{items:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:e=>{const t=l(e);h.addItem(t)}},".cards__list"),u={};document.querySelectorAll(i.formSelector).forEach((e=>{const s=new t(i,e);s.enableValidation(),u[e.getAttribute("id")]=s}));const m=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:s,avatar:r,id:n}=e;this._nameElement.textContent=t,this._jobElement.textContent=s,this._avatarElement.src=r,this._id=n}getUserId(){return this._id}}({nameSelector:"#profile-title",jobSelector:"#profile-desc",avatarSelector:".profile__pic"}),_=new r("#profile-edit-modal",(e=>a.setUserInfo({name:e.title,about:e.description}).then((e=>{m.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})}))),u["edit-profile-form"]),p=new r("#add-card-modal",(e=>a.addNewCard({name:e.title,link:e.link}).then((e=>{const t=l(e);h.addItem(t)}))),u["add-card-form"]),E=new r("#update-avatar-modal",(e=>a.updateUserAvatar(e.avatar).then((e=>{m.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})}))),u["update-avatar-form"]),g=new r("#delete-card-modal",(()=>{}),null);_.setEventListeners(),p.setEventListeners(),E.setEventListeners(),g.setEventListeners();const f=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__image-label")}open(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._caption.textContent=t,super.open()}}("#modal-image-display");f.setEventListeners(),document.getElementById("profile-edit-button").addEventListener("click",(()=>{const e=m.getUserInfo();document.getElementById("profile-title-input").value=e.name,document.getElementById("profile-description-input").value=e.job,_.open()})),document.querySelector(".profile__add-button").addEventListener("click",(()=>{p.open()})),document.querySelector(".profile__pic-container").addEventListener("click",(()=>{E.open()})),a.getAppInfo().then((e=>{let[t,s]=e;m.setUserInfo({name:t.name,job:t.about,avatar:t.avatar}),h.renderItems(s.reverse()),0===s.length&&n.forEach((e=>{a.addNewCard(e).then((e=>{const t=l(e);h.addItem(t)})).catch((e=>{console.error("Failed to upload card:",e)}))}))})).catch((e=>{console.error("Failed to fetch app info:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF3QkssaUJBQWlCLFNBQVMsS0FDdkUySixFQUFhMUcsTUFBTSxJQUdyQnZELFNBQ0dDLGNBQWMsMkJBQ2RLLGlCQUFpQixTQUFTLEtBQ3pCNkosRUFBa0I1RyxNQUFNLElBSTVCcUMsRUFDR3VCLGFBQ0FwQyxNQUFLbUQsSUFBdUIsSUFBckJxQyxFQUFVQyxHQUFNdEMsRUFDdEJlLEVBQVMxQyxZQUFZLENBQ25CbEgsS0FBTWtMLEVBQVNsTCxLQUNmbUssSUFBS2UsRUFBU1QsTUFDZDVDLE9BQVFxRCxFQUFTckQsU0FFbkJlLEVBQVFXLFlBQVk0QixFQUFNQyxXQUdMLElBQWpCRCxFQUFNckcsUUFDUnNCLEVBQWExQyxTQUFTZ0YsSUFDcEJuQyxFQUNHZSxXQUFXb0IsR0FDWGhELE1BQU1tRixJQUNMLE1BQU1wQixFQUFjakIsRUFBV3FDLEdBQy9CakMsRUFBUVEsUUFBUUssRUFBWSxJQUU3QjdELE9BQU9DLElBQ05DLFFBQVFDLE1BQU0seUJBQTBCRixFQUFJLEdBQzVDLEdBRVIsSUFFREQsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTSw0QkFBNkJGLEVBQUksRyIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy91dGlscy9BcGkuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGEsXHJcbiAgICBjYXJkU2VsZWN0b3IsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaGFuZGxlRGVsZXRlQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlQ2xpY2tcclxuICApIHtcclxuICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDsgLy8gYWRkIHRoaXMgdG8ga2VlcCB0cmFjayBvZiBjYXJkIGlkXHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sgPSBoYW5kbGVMaWtlQ2xpY2s7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gZGF0YS5pc0xpa2VkIHx8IGZhbHNlOyAvLyBhZGQgdGhpcyB0byBrZWVwIHRyYWNrIG9mIGxpa2Ugc3RhdHVzXHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKHRoaXMuX25hbWUsIHRoaXMuX2xpbmspO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKHRoaXMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKHRoaXMpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUxpa2VCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gIXRoaXMuX2lzTGlrZWQ7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKVxyXG4gICAgICAuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICB9XHJcblxyXG4gIF9kZWxldGVDYXJkKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50ID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5zcmMgPSB0aGlzLl9saW5rO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5hbHQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIGlmICh0aGlzLl9pc0xpa2VkKSB7XHJcbiAgICAgIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgICAuY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuaW5wdXRTZWxlY3RvcilcclxuICAgICk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl9zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSB0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xyXG4gIH1cclxuXHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmVycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NldHRpbmdzLmVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgfVxyXG5cclxuICByZXNldFZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuaGFuZGxlRXNjQ2xvc2UgPSB0aGlzLmhhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVFc2NDbG9zZShldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfb3BlbmVkXCIpIHx8XHJcbiAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX19jbG9zZVwiKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCwgZm9ybVZhbGlkYXRvciA9IG51bGwpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLmZvcm1WYWxpZGF0b3IgPSBmb3JtVmFsaWRhdG9yO1xyXG4gICAgdGhpcy5zdWJtaXRCdXR0b24gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5zdWJtaXRCdXR0b25UZXh0ID0gdGhpcy5zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICBnZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIHRoaXMuZm9ybVZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuZm9ybVZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtVmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMucmVuZGVyTG9hZGluZyh0cnVlKTsgLy8gU2hvdyBcIlNhdmluZy4uLlwiIHRleHRcclxuICAgICAgdGhpcy5oYW5kbGVGb3JtU3VibWl0KHRoaXMuZ2V0SW5wdXRWYWx1ZXMoKSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmZvcm0ucmVzZXQoKTtcclxuICAgICAgICAgIGlmICh0aGlzLmZvcm1WYWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7IC8vIENsb3NlIHRoZSBwb3B1cCBhZnRlciBzdWJtaXNzaW9uXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOyAvLyBMb2cgdGhlIGVycm9yXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckxvYWRpbmcoZmFsc2UpOyAvLyBSZXNldCB0byBvcmlnaW5hbCB0ZXh0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlckxvYWRpbmcoaXNMb2FkaW5nKSB7XHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZpbmcuLi5cIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5zdWJtaXRCdXR0b25UZXh0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIGlmICh0aGlzLmZvcm1WYWxpZGF0b3IpIHtcclxuICAgICAgdGhpcy5mb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0U3VibWl0QWN0aW9uKGFjdGlvbikge1xyXG4gICAgdGhpcy5oYW5kbGVGb3JtU3VibWl0ID0gYWN0aW9uO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBmb3JtVmFsaWRhdGlvbk9wdGlvbnMgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IHsgZm9ybVZhbGlkYXRpb25PcHRpb25zLCBpbml0aWFsQ2FyZHMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL3V0aWxzL0FwaS5qc1wiO1xyXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSB0aGUgQVBJXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiBcIjZiNjhhOTI5LWQwOGUtNGNmOS1hNjk3LTM3MzE3ZDAwOWRkN1wiLFxyXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgfSxcclxufSk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKG5hbWUsIGxpbmspIHtcclxuICBwb3B1cFdpdGhJbWFnZS5vcGVuKHsgbmFtZSwgbGluayB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkRGF0YSkge1xyXG4gIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChcclxuICAgIGNhcmREYXRhLFxyXG4gICAgXCIjY2FyZC10ZW1wbGF0ZVwiLFxyXG4gICAgaGFuZGxlSW1hZ2VDbGljayxcclxuICAgIGhhbmRsZURlbGV0ZUNsaWNrLFxyXG4gICAgaGFuZGxlTGlrZUNsaWNrXHJcbiAgKTtcclxuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ2xpY2soY2FyZCkge1xyXG4gIGRlbGV0ZUNhcmRQb3B1cC5vcGVuKCk7XHJcbiAgZGVsZXRlQ2FyZFBvcHVwLnNldFN1Ym1pdEFjdGlvbigoKSA9PiB7XHJcbiAgICByZXR1cm4gYXBpXHJcbiAgICAgIC5kZWxldGVDYXJkKGNhcmQuX2lkKVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgY2FyZC5fZGVsZXRlQ2FyZCgpO1xyXG4gICAgICAgIGRlbGV0ZUNhcmRQb3B1cC5jbG9zZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZGVsZXRlIGNhcmQ6XCIsIGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soY2FyZCkge1xyXG4gIGNvbnN0IGxpa2VBY3Rpb24gPSBjYXJkLmlzTGlrZWRcclxuICAgID8gYXBpLnVubGlrZUNhcmQoY2FyZC5faWQpXHJcbiAgICA6IGFwaS5saWtlQ2FyZChjYXJkLl9pZCk7XHJcblxyXG4gIGxpa2VBY3Rpb25cclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgY2FyZC50b2dnbGVMaWtlQnV0dG9uKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byB1cGRhdGUgbGlrZSBzdGF0dXM6XCIsIGVycik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gSW5pdGlhbGl6ZSB0aGUgc2VjdGlvbiB3aXRoIGFuIGVtcHR5IGFycmF5IGluaXRpYWxseVxyXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAge1xyXG4gICAgaXRlbXM6IFtdLFxyXG4gICAgcmVuZGVyZXI6IChjYXJkRGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoY2FyZERhdGEpO1xyXG4gICAgICBzZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIFwiLmNhcmRzX19saXN0XCJcclxuKTtcclxuXHJcbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XHJcbmRvY3VtZW50XHJcbiAgLnF1ZXJ5U2VsZWN0b3JBbGwoZm9ybVZhbGlkYXRpb25PcHRpb25zLmZvcm1TZWxlY3RvcilcclxuICAuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgIGNvbnN0IGZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtVmFsaWRhdGlvbk9wdGlvbnMsIGZvcm1FbGVtZW50KTtcclxuICAgIGZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWRcIildID0gZm9ybVZhbGlkYXRvcjtcclxuICB9KTtcclxuXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lU2VsZWN0b3I6IFwiI3Byb2ZpbGUtdGl0bGVcIixcclxuICBqb2JTZWxlY3RvcjogXCIjcHJvZmlsZS1kZXNjXCIsXHJcbiAgYXZhdGFyU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3BpY1wiLFxyXG59KTtcclxuXHJcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNwcm9maWxlLWVkaXQtbW9kYWxcIixcclxuICAoaW5wdXRWYWx1ZXMpID0+IHtcclxuICAgIHJldHVybiBhcGlcclxuICAgICAgLnNldFVzZXJJbmZvKHtcclxuICAgICAgICBuYW1lOiBpbnB1dFZhbHVlcy50aXRsZSxcclxuICAgICAgICBhYm91dDogaW5wdXRWYWx1ZXMuZGVzY3JpcHRpb24sXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKCh1cGRhdGVkVXNlckluZm8pID0+IHtcclxuICAgICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgICBuYW1lOiB1cGRhdGVkVXNlckluZm8ubmFtZSxcclxuICAgICAgICAgIGpvYjogdXBkYXRlZFVzZXJJbmZvLmFib3V0LFxyXG4gICAgICAgICAgYXZhdGFyOiB1cGRhdGVkVXNlckluZm8uYXZhdGFyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIGZvcm1WYWxpZGF0b3JzW1wiZWRpdC1wcm9maWxlLWZvcm1cIl1cclxuKTtcclxuXHJcbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI2FkZC1jYXJkLW1vZGFsXCIsXHJcbiAgKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgICByZXR1cm4gYXBpXHJcbiAgICAgIC5hZGROZXdDYXJkKHtcclxuICAgICAgICBuYW1lOiBpbnB1dFZhbHVlcy50aXRsZSxcclxuICAgICAgICBsaW5rOiBpbnB1dFZhbHVlcy5saW5rLFxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigobmV3Q2FyZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChuZXdDYXJkKTtcclxuICAgICAgICBzZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIGZvcm1WYWxpZGF0b3JzW1wiYWRkLWNhcmQtZm9ybVwiXVxyXG4pO1xyXG5cclxuLy8gUG9wdXAgZm9yIHVwZGF0aW5nIHRoZSBhdmF0YXJcclxuY29uc3QgdXBkYXRlQXZhdGFyUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiN1cGRhdGUtYXZhdGFyLW1vZGFsXCIsXHJcbiAgKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgICByZXR1cm4gYXBpLnVwZGF0ZVVzZXJBdmF0YXIoaW5wdXRWYWx1ZXMuYXZhdGFyKS50aGVuKCh1cGRhdGVkVXNlckluZm8pID0+IHtcclxuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oe1xyXG4gICAgICAgIG5hbWU6IHVwZGF0ZWRVc2VySW5mby5uYW1lLFxyXG4gICAgICAgIGpvYjogdXBkYXRlZFVzZXJJbmZvLmFib3V0LFxyXG4gICAgICAgIGF2YXRhcjogdXBkYXRlZFVzZXJJbmZvLmF2YXRhcixcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIGZvcm1WYWxpZGF0b3JzW1widXBkYXRlLWF2YXRhci1mb3JtXCJdXHJcbik7XHJcblxyXG4vLyBObyBmb3JtIHZhbGlkYXRpb24gZm9yIGRlbGV0ZUNhcmRQb3B1cFxyXG5jb25zdCBkZWxldGVDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNkZWxldGUtY2FyZC1tb2RhbFwiLCAoKSA9PiB7fSwgbnVsbCk7XHJcblxyXG5wcm9maWxlRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG51cGRhdGVBdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5kZWxldGVDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IHBvcHVwV2l0aEltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI21vZGFsLWltYWdlLWRpc3BsYXlcIik7XHJcbnBvcHVwV2l0aEltYWdlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2ZpbGUtZWRpdC1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9maWxlLXRpdGxlLWlucHV0XCIpLnZhbHVlID0gdXNlckRhdGEubmFtZTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2ZpbGUtZGVzY3JpcHRpb24taW5wdXRcIikudmFsdWUgPSB1c2VyRGF0YS5qb2I7XHJcbiAgcHJvZmlsZUVkaXRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG5kb2N1bWVudFxyXG4gIC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3BpYy1jb250YWluZXJcIilcclxuICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIHVwZGF0ZUF2YXRhclBvcHVwLm9wZW4oKTtcclxuICB9KTtcclxuXHJcbi8vIEZldGNoIHVzZXIgaW5mbyBhbmQgaW5pdGlhbCBjYXJkcyBmcm9tIHRoZSBzZXJ2ZXIgYW5kIHJlbmRlciB0aGVtXHJcbmFwaVxyXG4gIC5nZXRBcHBJbmZvKClcclxuICAudGhlbigoW3VzZXJEYXRhLCBjYXJkc10pID0+IHtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHtcclxuICAgICAgbmFtZTogdXNlckRhdGEubmFtZSxcclxuICAgICAgam9iOiB1c2VyRGF0YS5hYm91dCxcclxuICAgICAgYXZhdGFyOiB1c2VyRGF0YS5hdmF0YXIsXHJcbiAgICB9KTtcclxuICAgIHNlY3Rpb24ucmVuZGVySXRlbXMoY2FyZHMucmV2ZXJzZSgpKTtcclxuXHJcbiAgICAvLyBVcGxvYWQgaW5pdGlhbCBjYXJkcyBpZiB0aGUgc2VydmVyIGhhcyBub25lXHJcbiAgICBpZiAoY2FyZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGluaXRpYWxDYXJkcy5mb3JFYWNoKChjYXJkKSA9PiB7XHJcbiAgICAgICAgYXBpXHJcbiAgICAgICAgICAuYWRkTmV3Q2FyZChjYXJkKVxyXG4gICAgICAgICAgLnRoZW4oKG5ld0NhcmQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjcmVhdGVDYXJkKG5ld0NhcmQpO1xyXG4gICAgICAgICAgICBzZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gdXBsb2FkIGNhcmQ6XCIsIGVycik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBmZXRjaCBhcHAgaW5mbzpcIiwgZXJyKTtcclxuICB9KTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLmJhc2VVcmwgPSBvcHRpb25zLmJhc2VVcmw7XHJcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICAvLyBBIGdlbmVyaWMgbWV0aG9kIGZvciBtYWtpbmcgcmVxdWVzdHMgYW5kIGNoZWNraW5nIHJlc3BvbnNlc1xyXG4gIHJlcXVlc3QodXJsLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHRoaXMuY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICAvLyBPdGhlciBtZXRob2RzIHVzaW5nIHRoZSByZXF1ZXN0IG1ldGhvZFxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYCR7dGhpcy5iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgJHt0aGlzLmJhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oZGF0YSkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgJHt0aGlzLmJhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkTmV3Q2FyZChkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAke3RoaXMuYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAke3RoaXMuYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbGlrZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAke3RoaXMuYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdW5saWtlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYCR7dGhpcy5iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVVc2VyQXZhdGFyKGF2YXRhclVybCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgJHt0aGlzLmJhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhdmF0YXI6IGF2YXRhclVybCB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0QXBwSW5mbygpIHtcclxuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nZXRVc2VySW5mbygpLCB0aGlzLmdldEluaXRpYWxDYXJkcygpXSk7XHJcbiAgfVxyXG5cclxuICBjaGVja1Jlc3BvbnNlKHJlcykge1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtcyhpdGVtcykge1xyXG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yLCBhdmF0YXJTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2pvYkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYlNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGpvYjogdGhpcy5fam9iRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgYXZhdGFyOiB0aGlzLl9hdmF0YXJFbGVtZW50LnNyYyxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGpvYiwgYXZhdGFyLCBpZCB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gam9iO1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgICB0aGlzLl9pZCA9IGlkO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlcklkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faW1hZ2UgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcHRpb24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZS1sYWJlbFwiKTtcclxuICB9XHJcblxyXG4gIG9wZW4oeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHRoaXMuX2ltYWdlLnNyYyA9IGxpbms7XHJcbiAgICB0aGlzLl9pbWFnZS5hbHQgPSBuYW1lO1xyXG4gICAgdGhpcy5fY2FwdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJDYXJkIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9pZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaXNMaWtlZCIsImlzTGlrZWQiLCJfZ2V0VGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2NhcmRJbWFnZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiX2NhcmRFbGVtZW50IiwidG9nZ2xlTGlrZUJ1dHRvbiIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIl9kZWxldGVDYXJkIiwicmVtb3ZlIiwiZ2VuZXJhdGVDYXJkIiwidGV4dENvbnRlbnQiLCJzcmMiLCJhbHQiLCJhZGQiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJmb3JtRWxlbWVudCIsIl9zZXR0aW5ncyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dExpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b24iLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9oYXNJbnZhbGlkSW5wdXQiLCJzb21lIiwiaW5wdXRFbGVtZW50IiwidmFsaWRpdHkiLCJ2YWxpZCIsInRvZ2dsZUJ1dHRvblN0YXRlIiwiZGlzYWJsZWQiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJpbnB1dEVycm9yQ2xhc3MiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yQ2xhc3MiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsInJlc2V0VmFsaWRhdGlvbiIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cCIsImhhbmRsZUVzY0Nsb3NlIiwiYmluZCIsIm9wZW4iLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsImZvcm1WYWxpZGF0b3IiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJzdXBlciIsImZvcm0iLCJzdWJtaXRCdXR0b24iLCJzdWJtaXRCdXR0b25UZXh0IiwiZ2V0SW5wdXRWYWx1ZXMiLCJmb3JtVmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwicmVuZGVyTG9hZGluZyIsInRoZW4iLCJyZXNldCIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZmluYWxseSIsImlzTG9hZGluZyIsInNldFN1Ym1pdEFjdGlvbiIsImFjdGlvbiIsImluaXRpYWxDYXJkcyIsImZvcm1WYWxpZGF0aW9uT3B0aW9ucyIsImZvcm1TZWxlY3RvciIsImFwaSIsIm9wdGlvbnMiLCJiYXNlVXJsIiwiaGVhZGVycyIsInJlcXVlc3QiLCJ1cmwiLCJmZXRjaCIsImNoZWNrUmVzcG9uc2UiLCJnZXRJbml0aWFsQ2FyZHMiLCJtZXRob2QiLCJnZXRVc2VySW5mbyIsInNldFVzZXJJbmZvIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhZGROZXdDYXJkIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImxpa2VDYXJkIiwidW5saWtlQ2FyZCIsInVwZGF0ZVVzZXJBdmF0YXIiLCJhdmF0YXJVcmwiLCJhdmF0YXIiLCJnZXRBcHBJbmZvIiwiUHJvbWlzZSIsImFsbCIsInJlcyIsIm9rIiwianNvbiIsInJlamVjdCIsInN0YXR1cyIsImF1dGhvcml6YXRpb24iLCJwb3B1cFdpdGhJbWFnZSIsImNyZWF0ZUNhcmQiLCJjYXJkRGF0YSIsImNhcmQiLCJkZWxldGVDYXJkUG9wdXAiLCJzZWN0aW9uIiwiX3JlZiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9yZW5kZXJlZEl0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImFkZEl0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImNhcmRFbGVtZW50IiwiZm9ybVZhbGlkYXRvcnMiLCJnZXRBdHRyaWJ1dGUiLCJ1c2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImpvYlNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfam9iRWxlbWVudCIsIl9hdmF0YXJFbGVtZW50Iiwiam9iIiwiX3JlZjIiLCJnZXRVc2VySWQiLCJwcm9maWxlRWRpdFBvcHVwIiwiaW5wdXRWYWx1ZXMiLCJ0aXRsZSIsImFib3V0IiwiZGVzY3JpcHRpb24iLCJ1cGRhdGVkVXNlckluZm8iLCJhZGRDYXJkUG9wdXAiLCJuZXdDYXJkIiwidXBkYXRlQXZhdGFyUG9wdXAiLCJfaW1hZ2UiLCJfY2FwdGlvbiIsImdldEVsZW1lbnRCeUlkIiwidXNlckRhdGEiLCJjYXJkcyIsInJldmVyc2UiXSwic291cmNlUm9vdCI6IiJ9