!function(){"use strict";var e=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}updateProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-25",headers:{authorization:"c56e30dc-2883-4270-a59e-b2f7bae969c6","Content-Type":"application/json"}});class t{constructor(e,t,s){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._toggleLikeButton()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._deleteCard()}))}_toggleLikeButton(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_deleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._getTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector),this._inactiveButtonClass=this._settings.inactiveButtonClass}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners(),this.toggleButtonState()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}}class r{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class n extends r{constructor(e,t,s){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._formValidator=s}_getInputValues(){return this._formValues={},this._form.querySelectorAll(".modal__input").forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._form.reset(),this._formValidator.toggleButtonState()}))}open(){super.open(),this._formValidator.resetValidation()}}const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};function o(e,t){u.open({name:e,link:t})}function a(s){const r=new t(s,"#card-template",o,{handleDeleteCard:t=>{e.deleteCard(t).then((()=>{r.removeCard()})).catch((e=>{console.error(e)}))},handleLikeCard:t=>{r.isLiked()?e.dislikeCard(t).then((e=>{r.updateLikes(e.likes)})).catch((e=>{console.error(e)})):e.likeCard(t).then((e=>{r.updateLikes(e.likes)})).catch((e=>{console.error(e)}))}});return r.generateCard()}const l=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>{const t=a(e);l.addItem(t)}},".cards__list"),c={};document.querySelectorAll(i.formSelector).forEach((e=>{const t=new s(i,e);t.enableValidation(),c[e.getAttribute("id")]=t}));const d=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}}({nameSelector:"#profile-title",jobSelector:"#profile-desc"}),h=new n("#profile-edit-modal",(t=>{e.updateProfile({name:t.title,about:t.description}).then((e=>{d.setUserInfo({name:e.name,job:e.about}),h.close()})).catch((e=>{console.error(e)}))}),c["edit-profile-form"]),_=new n("#add-card-modal",(t=>{const s={name:t.title,link:t.link};e.addCard(s).then((e=>{const t=a(e);l.addItem(t),_.close()})).catch((e=>{console.error(e)}))}),c["add-card-form"]),m=new n("#avatar-edit-modal",(t=>{e.updateAvatar(t.avatar).then((e=>{d.setAvatar(e.avatar),m.close()})).catch((e=>{console.error(e)}))}),c["edit-avatar-form"]);h.setEventListeners(),_.setEventListeners(),m.setEventListeners();const u=new class extends r{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__image-label")}open(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._caption.textContent=t,super.open()}}("#modal-image-display");u.setEventListeners(),document.getElementById("profile-edit-button").addEventListener("click",(()=>{const e=d.getUserInfo();document.getElementById("profile-title-input").value=e.name,document.getElementById("profile-description-input").value=e.job,h.open()})),document.querySelector(".profile__add-button").addEventListener("click",(()=>{_.open()})),document.querySelector(".profile__avatar").addEventListener("click",(()=>{m.open()})),document.addEventListener("DOMContentLoaded",(()=>{e.getUserInfo().then((e=>{d.setUserInfo({name:e.name,job:e.about,avatar:e.avatar})})).catch((e=>{console.error(e)})),e.getInitialCards().then((e=>{e.forEach((e=>{const t=a(e);l.addItem(t)}))})).catch((e=>{console.error(e)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,